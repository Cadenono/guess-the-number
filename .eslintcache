[{"C:\\Users\\gerri\\Desktop\\guess-the-numv1\\src\\index.js":"1","C:\\Users\\gerri\\Desktop\\guess-the-numv1\\src\\reportWebVitals.js":"2","C:\\Users\\gerri\\Desktop\\guess-the-numv1\\src\\App.js":"3","C:\\Users\\gerri\\Desktop\\guess-the-numv1\\src\\components\\Box.js":"4","C:\\Users\\gerri\\Desktop\\guess-the-numv1\\src\\components\\WinnerList.js":"5"},{"size":500,"mtime":1608621444171,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":3317,"mtime":1608739870914,"results":"9","hashOfConfig":"7"},{"size":293,"mtime":1608649073331,"results":"10","hashOfConfig":"7"},{"size":293,"mtime":1608738859234,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"qx44qu",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"C:\\Users\\gerri\\Desktop\\guess-the-numv1\\src\\index.js",[],["24","25"],"C:\\Users\\gerri\\Desktop\\guess-the-numv1\\src\\reportWebVitals.js",[],"C:\\Users\\gerri\\Desktop\\guess-the-numv1\\src\\App.js",["26","27","28","29"],"import React, { Component } from 'react';\nimport './components/App.css';\nimport { Box } from './components/Box';\nimport { WinnerList } from './components/WinnerList'\n\n\nexport class App extends Component {\n\n  constructor() { \n    super(); \n\n    this.state = { \n\n    people: [],\n    nameField: '',\n    valueField: '',\n    randomNumber: null,\n    showNumber: false,\n    sortedWinners: []\n\n    }\n  }\n\n  componentWillMount() {\n    this.state.randomNumber = Math.floor(Math.random() * 1000);\n  }\n\n  \n  handleChange = event => {\n    const type = event.target.id \n    switch(type) {\n      case 'name':\n        this.setState({ nameField: event.target.value })\n        \n        break; \n      case 'guess':\n        this.setState({ valueField: event.target.value })\n        // this.state.valueField = event.target.value\n        break; \n      \n    }\n\n  };\n\n    \n  submitChange = e => {\n      e.preventDefault(); \n      let name = this.state.nameField \n      let value = this.state.valueField \n      let user = new Object();\n    \n        user['name'] = name \n        user['value'] = value \n        let arrayToBePushed = this.state.people\n        arrayToBePushed.push(user)\n  \n        this.setState({ people: arrayToBePushed })\n        this.setState({ nameField: '', valueField: ''});\n      }\n\n    calculateNumber = e => {\n      e.preventDefault(); \n      let length = this.state.people.length;\n      if (!length) { \n        alert('Please enter a value.')\n        return; \n      }\n      let randNum = this.state.randomNumber;\n      let sortedArray = this.state.people.sort(function(a, b) {\n        let diff_a = parseInt(a.value) - randNum\n        let diff_b = parseInt(b.value) - randNum \n        if (Math.abs(diff_a) - Math.abs(diff_b) > 0) { \n          return 1\n        } if (Math.abs(diff_a) - Math.abs(diff_b) < 0) {\n          return -1 \n        } \n          return 0\n        \n      });\n      console.log(sortedArray)\n\n      this.setState({ showNumber: true })\n      this.setState({ sortedWinners: sortedArray})\n\n    \n    }\n\n\n\n  render() {\n    // const { people, nameField, searchField } = this.state;\n    return (\n      <div>\n\n      <header>Guess The Magical Number</header>\n      <div className='instructions'>Choose a number from 1 to 1000.</div>\n      <h1> {this.state.showNumber && `${this.state.randomNumber}` } </h1> \n      <img src=\"https://www.freeiconspng.com/uploads/dice-png-transparent-images--png-all-4.png\" alt=\"Dice PNG Transparent Images | PNG All\" className=\"dice-img\" />\n      <form>\n      <p>Name:</p>\n      <Box boxname='input-box-name' type='name' value={this.state.nameField} handleChange={this.handleChange}/>\n      \n     \n      <p>Guess: </p>\n      <Box boxname= 'input-box-guess' type=\"guess\" value={this.state.valueField} handleChange={this.handleChange}/>\n\n    <button type=\"submit\" onClick={this.submitChange}>\n      <i className=\"fas fa-plus-square\"></i>\n   </button>  \n   <button className='submit-button' type=\"submit\" onClick={this.calculateNumber}>\n   Submit\n </button>  \n  \n   </form>\n\n<div>\n {this.state.sortedWinners.length == 0 ?    <WinnerList people={ this.state.people}/> :   <WinnerList people={this.state.sortedWinners}/>}\n\n</div>\n\n      </div>\n    )\n  }\n};\n\nexport default App\n\n// <WinnerList people={ this.state.people}/>\n   \n// <WinnerList sortedWinners={this.state.sortedWinners}/>","C:\\Users\\gerri\\Desktop\\guess-the-numv1\\src\\components\\Box.js",[],"C:\\Users\\gerri\\Desktop\\guess-the-numv1\\src\\components\\WinnerList.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":25,"column":5,"nodeType":"36","endLine":25,"endColumn":15},{"ruleId":"37","severity":1,"message":"38","line":31,"column":5,"nodeType":"39","messageId":"40","endLine":41,"endColumn":6},{"ruleId":"41","severity":1,"message":"42","line":50,"column":18,"nodeType":"43","messageId":"44","endLine":50,"endColumn":30},{"ruleId":"45","severity":1,"message":"46","line":117,"column":35,"nodeType":"47","messageId":"48","endLine":117,"endColumn":37},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]