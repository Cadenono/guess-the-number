{"version":3,"sources":["components/Box.js","components/WinnerList.js","App.js","reportWebVitals.js","index.js"],"names":["Box","props","id","type","value","className","boxname","onChange","handleChange","WinnerList","people","map","person","i","name","App","event","target","setState","nameField","valueField","submitChange","e","preventDefault","state","user","Object","arrayToBePushed","push","calculateNumber","length","randNum","randomNumber","sortedArray","sort","a","b","diff_a","parseInt","diff_b","Math","abs","console","log","showNumber","sortedWinners","alert","this","floor","random","src","alt","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8126849f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './../Box.styles.css';\r\n\r\nexport const Box = props => (\r\n  <div >\r\n  <input id={props.type} value={props.value} className = {props.boxname} type=\"text\" onChange={props.handleChange} />\r\n  </div>\r\n);\r\n\r\n// <input className = 'input-box-guess' type=\"text\" />","import React from 'react';\r\nimport './WinnerList.styles.css';\r\n\r\nexport const WinnerList = props => (\r\n  \r\n  <div className='winner-list-container'>\r\n\r\n  {props.people.map( (person,i) => (\r\n    \r\n      <p key={person.id}> {i+1}) {person.name}: {person.value}</p>\r\n     \r\n  ))}\r\n  </div>\r\n\r\n); ","import React, { Component } from 'react';\nimport './components/App.css';\nimport { Box } from './components/Box';\nimport { WinnerList } from './components/WinnerList'\n\n\nexport class App extends Component {\n\n  constructor() { \n    super(); \n\n    this.state = { \n\n    people: [],\n    nameField: '',\n    valueField: '',\n    randomNumber: null,\n    showNumber: false,\n    sortedWinners: []\n\n    }\n  }\n\n  componentWillMount() {\n    this.state.randomNumber = Math.floor(Math.random() * 1000);\n  }\n\n  \n  handleChange = event => {\n    const type = event.target.id \n    switch(type) {\n      case 'name':\n        this.setState({ nameField: event.target.value })\n        \n        break; \n      case 'guess':\n        this.setState({ valueField: event.target.value })\n        // this.state.valueField = event.target.value\n        break; \n      \n    }\n\n  };\n\n    \n  submitChange = e => {\n      e.preventDefault(); \n      let name = this.state.nameField \n      let value = this.state.valueField \n      let user = new Object();\n    \n        user['name'] = name \n        user['value'] = value \n        let arrayToBePushed = this.state.people\n        arrayToBePushed.push(user)\n  \n        this.setState({ people: arrayToBePushed })\n        this.setState({ nameField: '', valueField: ''});\n      }\n\n    calculateNumber = e => {\n      e.preventDefault(); \n      let length = this.state.people.length;\n      if (!length) { \n        alert('Please enter a value.')\n        return; \n      }\n      let randNum = this.state.randomNumber;\n      let sortedArray = this.state.people.sort(function(a, b) {\n        let diff_a = parseInt(a.value) - randNum\n        let diff_b = parseInt(b.value) - randNum \n        if (Math.abs(diff_a) - Math.abs(diff_b) > 0) { \n          return 1\n        } if (Math.abs(diff_a) - Math.abs(diff_b) < 0) {\n          return -1 \n        } \n          return 0\n        \n      });\n      console.log(sortedArray)\n\n      this.setState({ showNumber: true })\n      this.setState({ sortedWinners: sortedArray})\n\n    \n    }\n\n\n\n  render() {\n    // const { people, nameField, searchField } = this.state;\n    return (\n      <div>\n\n      <header>Guess The Magical Number</header>\n      <div className='instructions'>Choose a number from 1 to 1000.</div>\n      <h1> {this.state.showNumber && `${this.state.randomNumber}` } </h1> \n      <img src=\"https://www.freeiconspng.com/uploads/dice-png-transparent-images--png-all-4.png\" alt=\"Dice PNG Transparent Images | PNG All\" className=\"dice-img\" />\n      <form>\n      <p>Name:</p>\n      <Box boxname='input-box-name' type='name' value={this.state.nameField} handleChange={this.handleChange}/>\n      \n     \n      <p>Guess: </p>\n      <Box boxname= 'input-box-guess' type=\"guess\" value={this.state.valueField} handleChange={this.handleChange}/>\n\n    <button type=\"submit\" onClick={this.submitChange}>\n      <i className=\"fas fa-plus-square\"></i>\n   </button>  \n   <button className='submit-button' type=\"submit\" onClick={this.calculateNumber}>\n   Submit\n </button>  \n  \n   </form>\n\n<div>\n {this.state.sortedWinners.length == 0 ?    <WinnerList people={ this.state.people}/> :   <WinnerList people={this.state.sortedWinners}/>}\n\n</div>\n\n      </div>\n    )\n  }\n};\n\nexport default App\n\n// <WinnerList people={ this.state.people}/>\n   \n// <WinnerList sortedWinners={this.state.sortedWinners}/>","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}